{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/Anisina/source/css/blog-style.css","path":"css/blog-style.css","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/Anisina/source/css/syntax.styl","path":"css/syntax.styl","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/Anisina/source/images/header.jpg","path":"images/header.jpg","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/blog.js","path":"js/blog.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/images/earth.jpg","path":"images/earth.jpg","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/images/blog-bg-black-run.jpg","path":"images/blog-bg-black-run.jpg","modified":0,"renderable":1},{"_id":"themes/Anisina/source/images/post_default_one.png","path":"images/post_default_one.png","modified":0,"renderable":1},{"_id":"themes/Anisina/source/images/post_default.jpg","path":"images/post_default.jpg","modified":0,"renderable":1},{"_id":"themes/Anisina/source/images/post_default_two.png","path":"images/post_default_two.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"4a36dc50713f24ff9794a9a44f59d5c346a21b0d","modified":1509955805000},{"_id":"themes/Anisina/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1509682007000},{"_id":"themes/Anisina/README.md","hash":"ebde4101f083169abf82f5d9aa6fa34959d5cf11","modified":1509682007000},{"_id":"themes/Anisina/.DS_Store","hash":"ad9f6cd30a9a6c17640414a7db14dc36bac208ad","modified":1509777380000},{"_id":"themes/Anisina/_config.yml","hash":"06bccfc42b143659f59ea78938f00c217ac5574d","modified":1509682007000},{"_id":"themes/Anisina/package.json","hash":"12541fbf56f785e4f5d486a55b4939f3033f625b","modified":1509682007000},{"_id":"source/_posts/Python批量生成二维码.md","hash":"cad34d37d24c66cfff6edbe320f9f93557cb4af2","modified":1520585178663},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1509789240000},{"_id":"source/_posts/git-pull冲突解决.md","hash":"f6d826a38f968263c51d68bfa68b43fb46d870f1","modified":1520585167379},{"_id":"source/_posts/软件设计师考点内容-一.md","hash":"688a0e9f335e41670471ce650c3defd0522aed27","modified":1520585160966},{"_id":"source/archives/index.md","hash":"3988ac8fdf49da191a412e1cfb4b919e08286266","modified":1509955805000},{"_id":"source/tags/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1509955805000},{"_id":"source/tags/index.md","hash":"d31abafee7a4fa790b84ee0038f83113abcf11d5","modified":1509789240000},{"_id":"themes/Anisina/.git/config","hash":"050bd84e438fe3cde46d681fefd19a7d07cb0f15","modified":1509682007000},{"_id":"themes/Anisina/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1509682007000},{"_id":"themes/Anisina/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1509682004000},{"_id":"themes/Anisina/.git/index","hash":"82516f2712d7f2b71465a69466c1045adf927fe0","modified":1509788776000},{"_id":"themes/Anisina/.git/packed-refs","hash":"4fa6fa919e27b1ffaac23772a152c351ca7144e5","modified":1509682007000},{"_id":"themes/Anisina/.idea/modules.xml","hash":"6f81355dee5b607683bdbd56595a930fb4b83c8b","modified":1509682007000},{"_id":"themes/Anisina/.idea/Anisina.iml","hash":"4240dabdc746a36bae8a56eeec04a3a3fc59d842","modified":1509682007000},{"_id":"themes/Anisina/.idea/vcs.xml","hash":"c92f3eb0ad1c70371e177a4d7d741f90af3f902c","modified":1509682007000},{"_id":"themes/Anisina/.idea/workspace.xml","hash":"7c5d920658041056cc34836371895677b507001c","modified":1509682007000},{"_id":"themes/Anisina/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1509682007000},{"_id":"themes/Anisina/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1509682007000},{"_id":"themes/Anisina/Screenshots/mobile-index.jpeg","hash":"cd75f77f5d865d42182e2233e354eeba9f114d98","modified":1509682007000},{"_id":"themes/Anisina/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1509682007000},{"_id":"themes/Anisina/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1509682007000},{"_id":"themes/Anisina/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1509682007000},{"_id":"themes/Anisina/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1509682007000},{"_id":"themes/Anisina/languages_to_be_added/zh-CN.yml","hash":"33213b0d940cc5df384f8376151616574ff67fe1","modified":1509694518000},{"_id":"themes/Anisina/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1509682007000},{"_id":"themes/Anisina/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1509682007000},{"_id":"themes/Anisina/layout/.DS_Store","hash":"fc5a428fe40854a0ba66b4cea196c6700a57cae7","modified":1509788901000},{"_id":"themes/Anisina/layout/404.ejs","hash":"1fe05722bd1b32bbe0ae4e3e880866f935e0ae11","modified":1486132624000},{"_id":"themes/Anisina/layout/index.ejs","hash":"6820c011dc7b05d1a838d784e303b348b6426aee","modified":1509788472000},{"_id":"themes/Anisina/layout/layout.ejs","hash":"9d3d82a707b107f42db34ef5a8016693da2be742","modified":1486132624000},{"_id":"themes/Anisina/layout/about.ejs","hash":"71adae5f8b145c86eb3587bdc581347367e72c10","modified":1486132624000},{"_id":"themes/Anisina/layout/m_page.ejs","hash":"0406464c35c8accffa4d248e4046c013c9293ca5","modified":1486132624000},{"_id":"themes/Anisina/layout/page.ejs","hash":"d02762ca539942d8046175d90bdb9e1bb212db67","modified":1509788485000},{"_id":"themes/Anisina/layout/post.ejs","hash":"07a81a2b5c3cdb0692935e4a876219e5a5c645bd","modified":1486132624000},{"_id":"themes/Anisina/layout/poetry.ejs","hash":"6c955d419050825e13d39c780d45aceafbf6552d","modified":1486132624000},{"_id":"themes/Anisina/layout/tags.ejs","hash":"a144c3b5f4a70f881333e4de392a265469cdb649","modified":1486132624000},{"_id":"themes/Anisina/layout/works.ejs","hash":"1df954e54098cc4845295836374abed870789dcd","modified":1486132624000},{"_id":"themes/Anisina/source/.DS_Store","hash":"c01ed1d6e12fe12b962860fc4fea984b64f67352","modified":1509702675000},{"_id":"themes/Anisina/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1509682004000},{"_id":"themes/Anisina/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1509682004000},{"_id":"themes/Anisina/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1509682004000},{"_id":"themes/Anisina/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1509682004000},{"_id":"themes/Anisina/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1509682004000},{"_id":"themes/Anisina/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1509682004000},{"_id":"themes/Anisina/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1509682004000},{"_id":"themes/Anisina/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1509682004000},{"_id":"themes/Anisina/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1509682004000},{"_id":"themes/Anisina/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1509682004000},{"_id":"themes/Anisina/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1509682004000},{"_id":"themes/Anisina/.git/logs/HEAD","hash":"63b8f1c60d2ca785190ebcde62ee626322ea2346","modified":1509682007000},{"_id":"themes/Anisina/.idea/inspectionProfiles/Project_Default.xml","hash":"cb98213afbdfab7620cd4b6ba8801035079b4ae5","modified":1509682007000},{"_id":"themes/Anisina/Screenshots/Anisina.png","hash":"146dd991f55a827a514259e20a51de1e9b07a13d","modified":1509682007000},{"_id":"themes/Anisina/layout/_partial/head.ejs","hash":"ffff40ee9f8359022e28fe6d50b1d5ea75855706","modified":1486132624000},{"_id":"themes/Anisina/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1486132624000},{"_id":"themes/Anisina/layout/_partial/nav.ejs","hash":"9b6cdb16e779f71d8e4f02b96e8f88f13934ad36","modified":1509957016000},{"_id":"themes/Anisina/layout/_partial/footer.ejs","hash":"6bb9d7fb3cbbb04c5bae38e1237e78cc67427147","modified":1509786177000},{"_id":"themes/Anisina/source/css/blog-style.css","hash":"c6830e31138e412c2aa05228c4cd6035063fe651","modified":1509682007000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1509682007000},{"_id":"themes/Anisina/source/css/syntax.styl","hash":"f3f9ff0d1ebc4f7fa18d7e367b2ba2f0899adbd4","modified":1509682007000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1509682007000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1509682007000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1509682007000},{"_id":"themes/Anisina/source/images/header.jpg","hash":"452124ac547b684b0c886b517c18c808ddf05818","modified":1509675851000},{"_id":"themes/Anisina/source/js/blog.js","hash":"0f805c744ef8a48c0abdd9d204cfc19ee6cafc14","modified":1509682007000},{"_id":"themes/Anisina/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1509682007000},{"_id":"themes/Anisina/source/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1509682007000},{"_id":"themes/Anisina/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1509682007000},{"_id":"themes/Anisina/Screenshots/poetry-show.png","hash":"f5fdcd25026a87a0aafeebb1f19cdb3c0a81a666","modified":1509682007000},{"_id":"themes/Anisina/source/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1509682007000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1509682007000},{"_id":"themes/Anisina/.git/objects/pack/pack-d5625e50dc8e32e62e61074fda98d20b13ff0d20.idx","hash":"22e64356f70bf9d1bbe9d7a2c44616ab7688c092","modified":1509682007000},{"_id":"themes/Anisina/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1509682007000},{"_id":"themes/Anisina/.git/refs/heads/master","hash":"ffae89de3fdd4b094ca221452a0920087a775650","modified":1509682007000},{"_id":"themes/Anisina/Screenshots/mobile-post.jpeg","hash":"2081cdff23a9a8c185a48d9aabcc9dc8e77833ec","modified":1509682007000},{"_id":"themes/Anisina/source/images/earth.jpg","hash":"21f51e6789c1e74865c3f32491c0a4bbc68ba32c","modified":1509775989000},{"_id":"themes/Anisina/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1509682007000},{"_id":"themes/Anisina/.git/logs/refs/heads/master","hash":"63b8f1c60d2ca785190ebcde62ee626322ea2346","modified":1509682007000},{"_id":"themes/Anisina/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1509682007000},{"_id":"themes/Anisina/source/images/blog-bg-black-run.jpg","hash":"41c9134f52d4c4407025a4495c22792afc7e6151","modified":1509776190000},{"_id":"themes/Anisina/Screenshots/pc-index.png","hash":"b04094dac75cb656b4244c1dfaf246168a0f8926","modified":1509682007000},{"_id":"themes/Anisina/.git/logs/refs/remotes/origin/HEAD","hash":"63b8f1c60d2ca785190ebcde62ee626322ea2346","modified":1509682007000},{"_id":"themes/Anisina/Screenshots/pc-post.png","hash":"cde56c0797b6ff8dd555fb1f8c3f9b21bceaa3be","modified":1509682007000},{"_id":"themes/Anisina/source/images/post_default_one.png","hash":"9901f8a82cbbad4c8957442c6e449cb16b799f91","modified":1509694118000},{"_id":"themes/Anisina/source/images/post_default.jpg","hash":"9c563c2e7329d16c7ab6ed9a1fbbc484d18440f1","modified":1506489011000},{"_id":"themes/Anisina/source/images/post_default_two.png","hash":"6be188c90bfdc48bc56ac6d3ddfda24dc1b55b82","modified":1509694122000},{"_id":"themes/Anisina/.git/objects/pack/pack-d5625e50dc8e32e62e61074fda98d20b13ff0d20.pack","hash":"20b048c7812e152d2d8aaf4863ced542cd015f7b","modified":1509682007000},{"_id":"public/baidusitemap.xml","hash":"5f4ed7b65784fe62cad8912c34e8006abdd37f01","modified":1520586649145},{"_id":"public/atom.xml","hash":"8529bb4f8f2ae2eb86d5687e644359203fc2fbbb","modified":1520586649201},{"_id":"public/content.json","hash":"025f6221764a6acf1a327320cfffb60d9a9d2f3d","modified":1520586649257},{"_id":"public/sitemap.xml","hash":"b89cf5a322e48921203eebcb99f6c1e1c938e4ce","modified":1520586649258},{"_id":"public/tags/index.html","hash":"0543f7824c2748da2c0cc6183fa002b722d3af0d","modified":1520586649266},{"_id":"public/tags/Python/index.html","hash":"699d8213bb282e5e0ff208e782d894532c45dfec","modified":1520586649273},{"_id":"public/2017/11/04/git-pull冲突解决/index.html","hash":"c4d8a72c6cd531da023443706102aaf374fa6554","modified":1520586649291},{"_id":"public/2017/11/04/Python批量生成二维码/index.html","hash":"22d92be6909282635d26cbf3b7e7dbfe226a480a","modified":1520586649291},{"_id":"public/2017/11/04/软件设计师考点内容-一/index.html","hash":"9ad3acd3bb3feac61d89fa683ec4d1947525048c","modified":1520586649291},{"_id":"public/archives/index.html","hash":"d70a68d7683c728c6fa4a3ad2ed39f86dd159150","modified":1520586649291},{"_id":"public/archives/2017/index.html","hash":"d5a5414d5e94ddbe9c1d7909bb28cef89aa2949b","modified":1520586649291},{"_id":"public/archives/2017/11/index.html","hash":"5a376ac28dceed5a25be7833eda3a1d5b02962f5","modified":1520586649291},{"_id":"public/index.html","hash":"0a1f5bcf7f74ff56154bd8e86a3d60288345348d","modified":1520586649291},{"_id":"public/tags/git/index.html","hash":"0157b41ccbc446db92ebbb85d54e210212d2f83e","modified":1520586649296},{"_id":"public/tags/软件设计师/index.html","hash":"e37e55cd974ea4e790e6dfa5c32e8a55f642b4c7","modified":1520586649296},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1520586649297},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1520586649297},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1520586649297},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1520586649297},{"_id":"public/images/header.jpg","hash":"452124ac547b684b0c886b517c18c808ddf05818","modified":1520586649297},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1520586649508},{"_id":"public/css/syntax.css","hash":"4616879fec214c9cc4f5835615348f0bbeabf2a9","modified":1520586649513},{"_id":"public/js/blog.js","hash":"0f805c744ef8a48c0abdd9d204cfc19ee6cafc14","modified":1520586649513},{"_id":"public/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1520586649513},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1520586649513},{"_id":"public/css/blog-style.css","hash":"c6830e31138e412c2aa05228c4cd6035063fe651","modified":1520586649513},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1520586649513},{"_id":"public/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1520586649513},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1520586649513},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1520586649513},{"_id":"public/images/earth.jpg","hash":"21f51e6789c1e74865c3f32491c0a4bbc68ba32c","modified":1520586649518},{"_id":"public/images/blog-bg-black-run.jpg","hash":"41c9134f52d4c4407025a4495c22792afc7e6151","modified":1520586649519},{"_id":"public/images/post_default_one.png","hash":"9901f8a82cbbad4c8957442c6e449cb16b799f91","modified":1520586649536},{"_id":"public/images/post_default.jpg","hash":"9c563c2e7329d16c7ab6ed9a1fbbc484d18440f1","modified":1520586649539},{"_id":"public/images/post_default_two.png","hash":"6be188c90bfdc48bc56ac6d3ddfda24dc1b55b82","modified":1520586649541}],"Category":[],"Data":[],"Page":[{"title":"归档","date":"2017-11-03T07:09:55.000Z","updated":"2017-11-03T07:09:55.000Z","layout":"archives","comments":0,"_content":"","source":"archives/index.md","raw":"---\ntitle: 归档\ndate: 2017-11-03 15:09:55\nupdated: 2017-11-03 15:09:55\nlayout: archives\ncomments: false\n---\n","path":"archives/index.html","_id":"cjejq13bo0001okfyx5nxt03s","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-11-03T07:10:56.000Z","updated":"2017-11-03T07:10:56.000Z","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-11-03 15:10:56\nupdated: 2017-11-03 15:10:56\nlayout: tags\ncomments: false\n---\n","path":"tags/index.html","_id":"cjejq13bs0003okfybc8jbesc","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Python批量生成二维码","date":"2017-11-04T06:54:31.000Z","author":"chenJF","archives":"Python","_content":"# Python2.7 批量生成二维\n\n## 导语：\n> 本文针对mac电脑利用Python2.7脚本批量生成二维码，由于Python生成二维码利用了qrcode和image库，需要先用pip安装这两个库。这里顺便说了下pip的安装。\n\n\n### 1.pip的安装\n* 用命令行安装pip\n~~~\nsudo easy_install pip\n~~~\n* 检查是否安装成功，只要不是not found pip，则安装成功\n~~~\npip help\n~~~\n<br>\n### 2.安装qrcode和image库\n* 安装命令\n~~~\n#安装失败可以加sudo安装\npip install qrcode\npip install image\n~~~\n* 检查是否安装成功,安装成功会有相应的版本信息\n~~~\npip show qrcode\npip show image\n~~~\n* 安装成功显示界面信息\n\n* ![python-qrcode.png](http://upload-images.jianshu.io/upload_images/4970496-ce568913bd5e15a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<br>\n### 3.示例代码\n~~~\n# 导入qrcode库\nimport qrcode\n\n#生成一张二维码图片，url二维码的内容，name保存二维码图片的名字\ndef createOneQR(url,name):\nqr=qrcode.QRCode(version = 2,\nerror_correction = qrcode.constants.ERROR_CORRECT_L, #容错样式\nbox_size=10,   #每个格子的像素\nborder=1)      #边框宽度\nqr.add_data(url)\nqr.make(fit=True)\nimg = qr.make_image()\nimg.resize((140, 140)).save(name)   #保存为140*140的图片\n\n\n#根据文档批量生成二维码\ndef getQR():\nnum = 0\n#遍历文档每行内容生成二维码\nfor line in open(\"license-for-card.txt\"):\nimageName = \"license\"+str(num)+\".png\"\ncreateOneQR(line,imageName)\nnum += 1\n\ngetQR()\n~~~\n\n* 参数 version 表示生成二维码的尺寸大小，取值范围是 1 至 40，最小尺寸 1 会生成 21 * 21 的二维码，version 每增加 1，生成的二维码就会添加 4 尺寸，例如 version 是 2，则生成 25 * 25 的二维码。\n\n* 参数 error_correction 指定二维码的容错系数，分别有以下4个系数：\n* ERROR_CORRECT_L: 7%的字码可被容错\n* ERROR_CORRECT_M: 15%的字码可被容错\n* ERROR_CORRECT_Q: 25%的字码可被容错\n* ERROR_CORRECT_H: 30%的字码可被容错\n* 参数 box_size 表示二维码里每个格子的像素大小。\n* 参数 border 表示边框的格子厚度是多少（默认是4）。\n","source":"_posts/Python批量生成二维码.md","raw":"---\ntitle: Python批量生成二维码\ndate: 2017-11-04 14:54:31\nauthor: \"chenJF\"\ntags:\n    - Python\narchives: Python\n---\n# Python2.7 批量生成二维\n\n## 导语：\n> 本文针对mac电脑利用Python2.7脚本批量生成二维码，由于Python生成二维码利用了qrcode和image库，需要先用pip安装这两个库。这里顺便说了下pip的安装。\n\n\n### 1.pip的安装\n* 用命令行安装pip\n~~~\nsudo easy_install pip\n~~~\n* 检查是否安装成功，只要不是not found pip，则安装成功\n~~~\npip help\n~~~\n<br>\n### 2.安装qrcode和image库\n* 安装命令\n~~~\n#安装失败可以加sudo安装\npip install qrcode\npip install image\n~~~\n* 检查是否安装成功,安装成功会有相应的版本信息\n~~~\npip show qrcode\npip show image\n~~~\n* 安装成功显示界面信息\n\n* ![python-qrcode.png](http://upload-images.jianshu.io/upload_images/4970496-ce568913bd5e15a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<br>\n### 3.示例代码\n~~~\n# 导入qrcode库\nimport qrcode\n\n#生成一张二维码图片，url二维码的内容，name保存二维码图片的名字\ndef createOneQR(url,name):\nqr=qrcode.QRCode(version = 2,\nerror_correction = qrcode.constants.ERROR_CORRECT_L, #容错样式\nbox_size=10,   #每个格子的像素\nborder=1)      #边框宽度\nqr.add_data(url)\nqr.make(fit=True)\nimg = qr.make_image()\nimg.resize((140, 140)).save(name)   #保存为140*140的图片\n\n\n#根据文档批量生成二维码\ndef getQR():\nnum = 0\n#遍历文档每行内容生成二维码\nfor line in open(\"license-for-card.txt\"):\nimageName = \"license\"+str(num)+\".png\"\ncreateOneQR(line,imageName)\nnum += 1\n\ngetQR()\n~~~\n\n* 参数 version 表示生成二维码的尺寸大小，取值范围是 1 至 40，最小尺寸 1 会生成 21 * 21 的二维码，version 每增加 1，生成的二维码就会添加 4 尺寸，例如 version 是 2，则生成 25 * 25 的二维码。\n\n* 参数 error_correction 指定二维码的容错系数，分别有以下4个系数：\n* ERROR_CORRECT_L: 7%的字码可被容错\n* ERROR_CORRECT_M: 15%的字码可被容错\n* ERROR_CORRECT_Q: 25%的字码可被容错\n* ERROR_CORRECT_H: 30%的字码可被容错\n* 参数 box_size 表示二维码里每个格子的像素大小。\n* 参数 border 表示边框的格子厚度是多少（默认是4）。\n","slug":"Python批量生成二维码","published":1,"updated":"2018-03-09T08:46:18.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjejq13bj0000okfyfkrulhaj","content":"<h1 id=\"Python2-7-批量生成二维\"><a href=\"#Python2-7-批量生成二维\" class=\"headerlink\" title=\"Python2.7 批量生成二维\"></a>Python2.7 批量生成二维</h1><h2 id=\"导语：\"><a href=\"#导语：\" class=\"headerlink\" title=\"导语：\"></a>导语：</h2><blockquote>\n<p>本文针对mac电脑利用Python2.7脚本批量生成二维码，由于Python生成二维码利用了qrcode和image库，需要先用pip安装这两个库。这里顺便说了下pip的安装。</p>\n</blockquote>\n<h3 id=\"1-pip的安装\"><a href=\"#1-pip的安装\" class=\"headerlink\" title=\"1.pip的安装\"></a>1.pip的安装</h3><ul>\n<li><p>用命令行安装pip</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo easy_install pip</div></pre></td></tr></table></figure>\n</li>\n<li><p>检查是否安装成功，只要不是not found pip，则安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">pip help</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"2-安装qrcode和image库\"><a href=\"#2-安装qrcode和image库\" class=\"headerlink\" title=\"2.安装qrcode和image库\"></a>2.安装qrcode和image库</h3><ul>\n<li><p>安装命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">#安装失败可以加sudo安装</div><div class=\"line\">pip install qrcode</div><div class=\"line\">pip install image</div></pre></td></tr></table></figure>\n</li>\n<li><p>检查是否安装成功,安装成功会有相应的版本信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">pip show qrcode</div><div class=\"line\">pip show image</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装成功显示界面信息</p>\n</li>\n<li><p><img src=\"http://upload-images.jianshu.io/upload_images/4970496-ce568913bd5e15a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"python-qrcode.png\"><br><br></p>\n<h3 id=\"3-示例代码\"><a href=\"#3-示例代码\" class=\"headerlink\" title=\"3.示例代码\"></a>3.示例代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\"># 导入qrcode库</div><div class=\"line\">import qrcode</div><div class=\"line\"></div><div class=\"line\">#生成一张二维码图片，url二维码的内容，name保存二维码图片的名字</div><div class=\"line\">def createOneQR(url,name):</div><div class=\"line\">qr=qrcode.QRCode(version = 2,</div><div class=\"line\">error_correction = qrcode.constants.ERROR_CORRECT_L, #容错样式</div><div class=\"line\">box_size=10,   #每个格子的像素</div><div class=\"line\">border=1)      #边框宽度</div><div class=\"line\">qr.add_data(url)</div><div class=\"line\">qr.make(fit=True)</div><div class=\"line\">img = qr.make_image()</div><div class=\"line\">img.resize((140, 140)).save(name)   #保存为140*140的图片</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#根据文档批量生成二维码</div><div class=\"line\">def getQR():</div><div class=\"line\">num = 0</div><div class=\"line\">#遍历文档每行内容生成二维码</div><div class=\"line\">for line in open(&quot;license-for-card.txt&quot;):</div><div class=\"line\">imageName = &quot;license&quot;+str(num)+&quot;.png&quot;</div><div class=\"line\">createOneQR(line,imageName)</div><div class=\"line\">num += 1</div><div class=\"line\"></div><div class=\"line\">getQR()</div></pre></td></tr></table></figure>\n</li>\n<li><p>参数 version 表示生成二维码的尺寸大小，取值范围是 1 至 40，最小尺寸 1 会生成 21 <em> 21 的二维码，version 每增加 1，生成的二维码就会添加 4 尺寸，例如 version 是 2，则生成 25 </em> 25 的二维码。</p>\n</li>\n<li><p>参数 error_correction 指定二维码的容错系数，分别有以下4个系数：</p>\n</li>\n<li>ERROR_CORRECT_L: 7%的字码可被容错</li>\n<li>ERROR_CORRECT_M: 15%的字码可被容错</li>\n<li>ERROR_CORRECT_Q: 25%的字码可被容错</li>\n<li>ERROR_CORRECT_H: 30%的字码可被容错</li>\n<li>参数 box_size 表示二维码里每个格子的像素大小。</li>\n<li>参数 border 表示边框的格子厚度是多少（默认是4）。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Python2-7-批量生成二维\"><a href=\"#Python2-7-批量生成二维\" class=\"headerlink\" title=\"Python2.7 批量生成二维\"></a>Python2.7 批量生成二维</h1><h2 id=\"导语：\"><a href=\"#导语：\" class=\"headerlink\" title=\"导语：\"></a>导语：</h2><blockquote>\n<p>本文针对mac电脑利用Python2.7脚本批量生成二维码，由于Python生成二维码利用了qrcode和image库，需要先用pip安装这两个库。这里顺便说了下pip的安装。</p>\n</blockquote>\n<h3 id=\"1-pip的安装\"><a href=\"#1-pip的安装\" class=\"headerlink\" title=\"1.pip的安装\"></a>1.pip的安装</h3><ul>\n<li><p>用命令行安装pip</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo easy_install pip</div></pre></td></tr></table></figure>\n</li>\n<li><p>检查是否安装成功，只要不是not found pip，则安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">pip help</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"2-安装qrcode和image库\"><a href=\"#2-安装qrcode和image库\" class=\"headerlink\" title=\"2.安装qrcode和image库\"></a>2.安装qrcode和image库</h3><ul>\n<li><p>安装命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">#安装失败可以加sudo安装</div><div class=\"line\">pip install qrcode</div><div class=\"line\">pip install image</div></pre></td></tr></table></figure>\n</li>\n<li><p>检查是否安装成功,安装成功会有相应的版本信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">pip show qrcode</div><div class=\"line\">pip show image</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装成功显示界面信息</p>\n</li>\n<li><p><img src=\"http://upload-images.jianshu.io/upload_images/4970496-ce568913bd5e15a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"python-qrcode.png\"><br><br></p>\n<h3 id=\"3-示例代码\"><a href=\"#3-示例代码\" class=\"headerlink\" title=\"3.示例代码\"></a>3.示例代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\"># 导入qrcode库</div><div class=\"line\">import qrcode</div><div class=\"line\"></div><div class=\"line\">#生成一张二维码图片，url二维码的内容，name保存二维码图片的名字</div><div class=\"line\">def createOneQR(url,name):</div><div class=\"line\">qr=qrcode.QRCode(version = 2,</div><div class=\"line\">error_correction = qrcode.constants.ERROR_CORRECT_L, #容错样式</div><div class=\"line\">box_size=10,   #每个格子的像素</div><div class=\"line\">border=1)      #边框宽度</div><div class=\"line\">qr.add_data(url)</div><div class=\"line\">qr.make(fit=True)</div><div class=\"line\">img = qr.make_image()</div><div class=\"line\">img.resize((140, 140)).save(name)   #保存为140*140的图片</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#根据文档批量生成二维码</div><div class=\"line\">def getQR():</div><div class=\"line\">num = 0</div><div class=\"line\">#遍历文档每行内容生成二维码</div><div class=\"line\">for line in open(&quot;license-for-card.txt&quot;):</div><div class=\"line\">imageName = &quot;license&quot;+str(num)+&quot;.png&quot;</div><div class=\"line\">createOneQR(line,imageName)</div><div class=\"line\">num += 1</div><div class=\"line\"></div><div class=\"line\">getQR()</div></pre></td></tr></table></figure>\n</li>\n<li><p>参数 version 表示生成二维码的尺寸大小，取值范围是 1 至 40，最小尺寸 1 会生成 21 <em> 21 的二维码，version 每增加 1，生成的二维码就会添加 4 尺寸，例如 version 是 2，则生成 25 </em> 25 的二维码。</p>\n</li>\n<li><p>参数 error_correction 指定二维码的容错系数，分别有以下4个系数：</p>\n</li>\n<li>ERROR_CORRECT_L: 7%的字码可被容错</li>\n<li>ERROR_CORRECT_M: 15%的字码可被容错</li>\n<li>ERROR_CORRECT_Q: 25%的字码可被容错</li>\n<li>ERROR_CORRECT_H: 30%的字码可被容错</li>\n<li>参数 box_size 表示二维码里每个格子的像素大小。</li>\n<li>参数 border 表示边框的格子厚度是多少（默认是4）。</li>\n</ul>\n"},{"title":"git pull冲突解决","date":"2017-11-04T07:04:14.000Z","author":"chenJF","archives":"工具","_content":"\n### 导语：\n> 在公司团队中写完代码就要提交到git上面，因为多人合作，先要将远端的代码pull更新到本地。往往这时候因为大家对同一个文件同一个地方做了操作，导致pull代码冲突发生，工程崩溃。提示错误信息如下：\n~~~\nerror: Your local changes to 'c/environ.c' would be overwritten by merge.  Aborting.\nPlease, commit your changes or stash them before you can merge.\n~~~\n> 这个提示意思就是说更新下来的内容和本地修改的内容有冲突，先提交你改变的内容或者先将你本地修改的内容暂时存起来。\n> 下面我们就分几步解决处理这个pull冲突问题.\n\n### 1.存储本地修改的内容\n~~~\ngit stash\n~~~\n这句命令就是将本地修改的代码做一份备份存储起来，可以用git stash list 查看刚刚备份保存的内容：\n![git stash list.png](http://upload-images.jianshu.io/upload_images/4970496-84f5c1a7a77608c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600)\n其中stash@{0}就是刚刚备份存储的标记\n\n### 2.pull内容\n将本地代码做了备份保存后，就可以pull远端代码\n~~~\ngit pull\n~~~\n\n### 3.还原备份暂存的代码\n~~~\ngit stash pop stash@{0}\n~~~\nstash@{0}是你刚刚备份存储的标记\n这时候系统会提示类似以下的信息：\n~~~\nAuto-merging c/environ.c\nCONFLICT (content): Merge conflict in c/environ.c\n~~~\n这个提示内容意思就是系统自动合并修改的内容，但是当中会有冲突，需要解决其中的冲突。\n\n### 4.解决文件中的冲突内容\n打开上面提示的冲突文件，会看到类似的内容：\n\n![冲突提示.png](http://upload-images.jianshu.io/upload_images/4970496-92f347853efe0765.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500)\n其中Updated upstream和=======之间的内容是从远端pull下来的代码，=======和Stashed changes之间的内容则是你本地修改的内容。这时候，需要你修改决定留下哪些需要的内容。\n\n最后，解决完冲突，就可以正常git提交了。\n","source":"_posts/git-pull冲突解决.md","raw":"---\ntitle: git pull冲突解决\ndate: 2017-11-04 15:04:14\nauthor: \"chenJF\"\ntags: git\narchives: 工具\n---\n\n### 导语：\n> 在公司团队中写完代码就要提交到git上面，因为多人合作，先要将远端的代码pull更新到本地。往往这时候因为大家对同一个文件同一个地方做了操作，导致pull代码冲突发生，工程崩溃。提示错误信息如下：\n~~~\nerror: Your local changes to 'c/environ.c' would be overwritten by merge.  Aborting.\nPlease, commit your changes or stash them before you can merge.\n~~~\n> 这个提示意思就是说更新下来的内容和本地修改的内容有冲突，先提交你改变的内容或者先将你本地修改的内容暂时存起来。\n> 下面我们就分几步解决处理这个pull冲突问题.\n\n### 1.存储本地修改的内容\n~~~\ngit stash\n~~~\n这句命令就是将本地修改的代码做一份备份存储起来，可以用git stash list 查看刚刚备份保存的内容：\n![git stash list.png](http://upload-images.jianshu.io/upload_images/4970496-84f5c1a7a77608c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600)\n其中stash@{0}就是刚刚备份存储的标记\n\n### 2.pull内容\n将本地代码做了备份保存后，就可以pull远端代码\n~~~\ngit pull\n~~~\n\n### 3.还原备份暂存的代码\n~~~\ngit stash pop stash@{0}\n~~~\nstash@{0}是你刚刚备份存储的标记\n这时候系统会提示类似以下的信息：\n~~~\nAuto-merging c/environ.c\nCONFLICT (content): Merge conflict in c/environ.c\n~~~\n这个提示内容意思就是系统自动合并修改的内容，但是当中会有冲突，需要解决其中的冲突。\n\n### 4.解决文件中的冲突内容\n打开上面提示的冲突文件，会看到类似的内容：\n\n![冲突提示.png](http://upload-images.jianshu.io/upload_images/4970496-92f347853efe0765.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500)\n其中Updated upstream和=======之间的内容是从远端pull下来的代码，=======和Stashed changes之间的内容则是你本地修改的内容。这时候，需要你修改决定留下哪些需要的内容。\n\n最后，解决完冲突，就可以正常git提交了。\n","slug":"git-pull冲突解决","published":1,"updated":"2018-03-09T08:46:07.379Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjejq13bq0002okfynbwsvojy","content":"<h3 id=\"导语：\"><a href=\"#导语：\" class=\"headerlink\" title=\"导语：\"></a>导语：</h3><blockquote>\n<p>在公司团队中写完代码就要提交到git上面，因为多人合作，先要将远端的代码pull更新到本地。往往这时候因为大家对同一个文件同一个地方做了操作，导致pull代码冲突发生，工程崩溃。提示错误信息如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">error: Your local changes to &apos;c/environ.c&apos; would be overwritten by merge.  Aborting.</div><div class=\"line\">Please, commit your changes or stash them before you can merge.</div></pre></td></tr></table></figure></p>\n<p>这个提示意思就是说更新下来的内容和本地修改的内容有冲突，先提交你改变的内容或者先将你本地修改的内容暂时存起来。<br>下面我们就分几步解决处理这个pull冲突问题.</p>\n</blockquote>\n<h3 id=\"1-存储本地修改的内容\"><a href=\"#1-存储本地修改的内容\" class=\"headerlink\" title=\"1.存储本地修改的内容\"></a>1.存储本地修改的内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">git stash</div></pre></td></tr></table></figure>\n<p>这句命令就是将本地修改的代码做一份备份存储起来，可以用git stash list 查看刚刚备份保存的内容：<br><img src=\"http://upload-images.jianshu.io/upload_images/4970496-84f5c1a7a77608c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600\" alt=\"git stash list.png\"><br>其中stash@{0}就是刚刚备份存储的标记</p>\n<h3 id=\"2-pull内容\"><a href=\"#2-pull内容\" class=\"headerlink\" title=\"2.pull内容\"></a>2.pull内容</h3><p>将本地代码做了备份保存后，就可以pull远端代码<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">git pull</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-还原备份暂存的代码\"><a href=\"#3-还原备份暂存的代码\" class=\"headerlink\" title=\"3.还原备份暂存的代码\"></a>3.还原备份暂存的代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">git stash pop stash@&#123;0&#125;</div></pre></td></tr></table></figure>\n<p>stash@{0}是你刚刚备份存储的标记<br>这时候系统会提示类似以下的信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">Auto-merging c/environ.c</div><div class=\"line\">CONFLICT (content): Merge conflict in c/environ.c</div></pre></td></tr></table></figure></p>\n<p>这个提示内容意思就是系统自动合并修改的内容，但是当中会有冲突，需要解决其中的冲突。</p>\n<h3 id=\"4-解决文件中的冲突内容\"><a href=\"#4-解决文件中的冲突内容\" class=\"headerlink\" title=\"4.解决文件中的冲突内容\"></a>4.解决文件中的冲突内容</h3><p>打开上面提示的冲突文件，会看到类似的内容：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/4970496-92f347853efe0765.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500\" alt=\"冲突提示.png\"><br>其中Updated upstream和=======之间的内容是从远端pull下来的代码，=======和Stashed changes之间的内容则是你本地修改的内容。这时候，需要你修改决定留下哪些需要的内容。</p>\n<p>最后，解决完冲突，就可以正常git提交了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"导语：\"><a href=\"#导语：\" class=\"headerlink\" title=\"导语：\"></a>导语：</h3><blockquote>\n<p>在公司团队中写完代码就要提交到git上面，因为多人合作，先要将远端的代码pull更新到本地。往往这时候因为大家对同一个文件同一个地方做了操作，导致pull代码冲突发生，工程崩溃。提示错误信息如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">error: Your local changes to &apos;c/environ.c&apos; would be overwritten by merge.  Aborting.</div><div class=\"line\">Please, commit your changes or stash them before you can merge.</div></pre></td></tr></table></figure></p>\n<p>这个提示意思就是说更新下来的内容和本地修改的内容有冲突，先提交你改变的内容或者先将你本地修改的内容暂时存起来。<br>下面我们就分几步解决处理这个pull冲突问题.</p>\n</blockquote>\n<h3 id=\"1-存储本地修改的内容\"><a href=\"#1-存储本地修改的内容\" class=\"headerlink\" title=\"1.存储本地修改的内容\"></a>1.存储本地修改的内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">git stash</div></pre></td></tr></table></figure>\n<p>这句命令就是将本地修改的代码做一份备份存储起来，可以用git stash list 查看刚刚备份保存的内容：<br><img src=\"http://upload-images.jianshu.io/upload_images/4970496-84f5c1a7a77608c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600\" alt=\"git stash list.png\"><br>其中stash@{0}就是刚刚备份存储的标记</p>\n<h3 id=\"2-pull内容\"><a href=\"#2-pull内容\" class=\"headerlink\" title=\"2.pull内容\"></a>2.pull内容</h3><p>将本地代码做了备份保存后，就可以pull远端代码<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">git pull</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-还原备份暂存的代码\"><a href=\"#3-还原备份暂存的代码\" class=\"headerlink\" title=\"3.还原备份暂存的代码\"></a>3.还原备份暂存的代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">git stash pop stash@&#123;0&#125;</div></pre></td></tr></table></figure>\n<p>stash@{0}是你刚刚备份存储的标记<br>这时候系统会提示类似以下的信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">Auto-merging c/environ.c</div><div class=\"line\">CONFLICT (content): Merge conflict in c/environ.c</div></pre></td></tr></table></figure></p>\n<p>这个提示内容意思就是系统自动合并修改的内容，但是当中会有冲突，需要解决其中的冲突。</p>\n<h3 id=\"4-解决文件中的冲突内容\"><a href=\"#4-解决文件中的冲突内容\" class=\"headerlink\" title=\"4.解决文件中的冲突内容\"></a>4.解决文件中的冲突内容</h3><p>打开上面提示的冲突文件，会看到类似的内容：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/4970496-92f347853efe0765.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500\" alt=\"冲突提示.png\"><br>其中Updated upstream和=======之间的内容是从远端pull下来的代码，=======和Stashed changes之间的内容则是你本地修改的内容。这时候，需要你修改决定留下哪些需要的内容。</p>\n<p>最后，解决完冲突，就可以正常git提交了。</p>\n"},{"title":"软件设计师考点内容(一)","date":"2017-11-04T06:54:31.000Z","author":"chenJF","archives":"软考","_content":"\n# 软件设计师考点内容分析\n\n\n### 1、CPU构成\n*     程序计数器(PC)：存放执行指令的地方，计算之前要用到\n*  累加器(AC)：暂时存放算数逻辑运算部件ALU运算的结果信息\n*  指令寄存器(IR)：保存当前正在执行的一条指令\n*  地址寄存器(AR)：保存当前CPU所要访问的内存单元的地址\n\n### 2、DMA(Direct Memory Access，直接内存存取)\n* DMA工作方式，是在DMA控制硬件的控制下，实现内存与外设间数据的直接传送，并不需要CPU参与工作，由于DMA方式是在DMA控制硬件的控制下实现数据的传送，不需要CPU执行程序，故这种方式传送的速度最快。\n\n### 3、系统可靠度\n* 并联部件的可靠度=1-部件失效率的乘积\n\n### 4、海明码\n* 海明码是一种可以纠正一位差错的编码\n* 公式：2<sup>r</sup>>=k+r+1 (r增加的冗余位，k有效的信息位)\n\n### 5、高速缓存Cache\n* Cache位于CPU和主存之间，由硬件实现，容量小，一般在几KB到几MB之间，速度一般比主存快5到10倍，由快速半导体存储器制成，其内容是主存内容的副本(Cache无法扩大主存的容量)，Cache既可存放程序又可存放数据。\n\n### 6、软件分析到设计的过程\n* 研究、分析和审查数据流图。根据穿越系统边界的信息流初步确定系统与外部接口\n* 根据数据流图决定问题的类型。数据处理问题通常有两种类型：变换型和事务型\n* 由数据流图推导出系统的初始结构图\n* 利用一些启发式原则来改进系统的初始结构图，直到得到符合要求的结构图为止\n* 根据分析模型中的实体关系图和数据字典进行数据设计，包括数据库设计和数据文件的设计\n* 在设计的基础上，依旧分析模型中的加工规格说明、状态转换图进行过程设计。\n\n### 7、螺旋模型\n* 螺旋模型是一种演化软件开发过程模型，它兼顾了快速原型的迭代的特征以及瀑布模型的系统化与严格监控。螺旋模型最大的特点在于引入了其他模型不具备的风险分析，使软件在无法排除重大风险时有机会停止，以减小损失。同时，在每个迭代阶段构建原型是螺旋模型用以减小风险的途径。螺旋模型更适合大型的昂贵的系统级软件应用。\n\n### 8、多态\n* 多态是同一操作用于不同对象，可以有不同的解释，产生不同的执行结果。在运行时，可以通过指向基类的指针，来调用实现派生类中的方法。也就是说客户类其实在调用方法时，并不需要知道特定子类的实现，都会用统一的方式来调用。\n\n### 9、装饰模式、外观模式\n* 装饰模式是一种对象结构型模式，可动态的给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。通过装饰模式，可以在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责；当需要动态的给一个对象增加功能，这些功能可以再动态的被撤销时可使用装饰模式；当不能采用生成子类的方法进行扩充时也可使用装饰模式。\n* 外观模式是对象的结构模式，要求外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。\n\n### 10、共享锁和排它锁\n* 共享锁(S锁)，又称为读锁，若事务T对数据对象A加上S锁，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上面的S锁。\n* 排它锁(X锁)，又称为写锁，若事务T对数据对象A加上X锁，其他事务不能再对A加任何锁，直到T释放A上的锁。\n\n### 11、二叉树遍历\n* 先序遍历：先根后左子树再右子树\n* 中序遍历：先左子树后根再右子树\n* 后序遍历：先左子树后右子树再根\n\n### 12、算法设计策略\n* 贪心法：求解问题最优解，将问题分解为若干步，每一步都取当前最优解，即局部最优解。\n* 分治法：求解问题唯一解，将问题分解为小规模的子问题，子问题之间相互独立。\n* 回溯法：求解问题最优解或唯一解，就是深度优先搜索，常用递归实现。\n* 分支限界法：求解问题最优解或唯一解，活结点。\n* 动态规划：求解最优解。同分治法类似，只是动态规划保存了之前求得的所有子问题的解，以避免重复的计算。\n* 随机化算法：分类有\n* ①数值随机算法：用于数值问题的求解，得到近似解。\n* ②蒙特卡洛算法：计算数学中的一种计算方法，用于求问题的准确解，得到正确的概率以来与时间。\n* ③拉斯维加斯算法：与蒙特卡洛算法相似，但是绝不返回错误的解。\n* ④舍伍德算法：在确定性算法中加入随机性来降低最坏情况出现的概率。\n\n### 13、域名查询记录\n* 域名查询记录先本地DNS缓存，再HOSTS表，然后再查找本地DNS服务器，顶级域名服务器、权限域名服务器。\n\n### 14、TCP/IP协议栈中协议和层次对应的关系\n![tcp.png](http://upload-images.jianshu.io/upload_images/4970496-279f07818917a8b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 15、小根堆和大根堆\n* 小根堆满足关系：k<sub>i</sub> ≤ k<sub>2i</sub> 且 k<sub>i</sub> ≤ k<sub>2i+1</sub>（I=1,2,....,n/2）\n* 大根堆满足关系：k<sub>i</sub> ≥ k<sub>2i</sub> 且 k<sub>i</sub> ≥ k<sub>2i+1</sub>（I=1,2,....,n/2）\n\n","source":"_posts/软件设计师考点内容-一.md","raw":"---\ntitle: 软件设计师考点内容(一)\ndate: 2017-11-04 14:54:31\nauthor: \"chenJF\"\ntags: 软件设计师\narchives: 软考\n---\n\n# 软件设计师考点内容分析\n\n\n### 1、CPU构成\n*     程序计数器(PC)：存放执行指令的地方，计算之前要用到\n*  累加器(AC)：暂时存放算数逻辑运算部件ALU运算的结果信息\n*  指令寄存器(IR)：保存当前正在执行的一条指令\n*  地址寄存器(AR)：保存当前CPU所要访问的内存单元的地址\n\n### 2、DMA(Direct Memory Access，直接内存存取)\n* DMA工作方式，是在DMA控制硬件的控制下，实现内存与外设间数据的直接传送，并不需要CPU参与工作，由于DMA方式是在DMA控制硬件的控制下实现数据的传送，不需要CPU执行程序，故这种方式传送的速度最快。\n\n### 3、系统可靠度\n* 并联部件的可靠度=1-部件失效率的乘积\n\n### 4、海明码\n* 海明码是一种可以纠正一位差错的编码\n* 公式：2<sup>r</sup>>=k+r+1 (r增加的冗余位，k有效的信息位)\n\n### 5、高速缓存Cache\n* Cache位于CPU和主存之间，由硬件实现，容量小，一般在几KB到几MB之间，速度一般比主存快5到10倍，由快速半导体存储器制成，其内容是主存内容的副本(Cache无法扩大主存的容量)，Cache既可存放程序又可存放数据。\n\n### 6、软件分析到设计的过程\n* 研究、分析和审查数据流图。根据穿越系统边界的信息流初步确定系统与外部接口\n* 根据数据流图决定问题的类型。数据处理问题通常有两种类型：变换型和事务型\n* 由数据流图推导出系统的初始结构图\n* 利用一些启发式原则来改进系统的初始结构图，直到得到符合要求的结构图为止\n* 根据分析模型中的实体关系图和数据字典进行数据设计，包括数据库设计和数据文件的设计\n* 在设计的基础上，依旧分析模型中的加工规格说明、状态转换图进行过程设计。\n\n### 7、螺旋模型\n* 螺旋模型是一种演化软件开发过程模型，它兼顾了快速原型的迭代的特征以及瀑布模型的系统化与严格监控。螺旋模型最大的特点在于引入了其他模型不具备的风险分析，使软件在无法排除重大风险时有机会停止，以减小损失。同时，在每个迭代阶段构建原型是螺旋模型用以减小风险的途径。螺旋模型更适合大型的昂贵的系统级软件应用。\n\n### 8、多态\n* 多态是同一操作用于不同对象，可以有不同的解释，产生不同的执行结果。在运行时，可以通过指向基类的指针，来调用实现派生类中的方法。也就是说客户类其实在调用方法时，并不需要知道特定子类的实现，都会用统一的方式来调用。\n\n### 9、装饰模式、外观模式\n* 装饰模式是一种对象结构型模式，可动态的给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。通过装饰模式，可以在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责；当需要动态的给一个对象增加功能，这些功能可以再动态的被撤销时可使用装饰模式；当不能采用生成子类的方法进行扩充时也可使用装饰模式。\n* 外观模式是对象的结构模式，要求外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。\n\n### 10、共享锁和排它锁\n* 共享锁(S锁)，又称为读锁，若事务T对数据对象A加上S锁，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上面的S锁。\n* 排它锁(X锁)，又称为写锁，若事务T对数据对象A加上X锁，其他事务不能再对A加任何锁，直到T释放A上的锁。\n\n### 11、二叉树遍历\n* 先序遍历：先根后左子树再右子树\n* 中序遍历：先左子树后根再右子树\n* 后序遍历：先左子树后右子树再根\n\n### 12、算法设计策略\n* 贪心法：求解问题最优解，将问题分解为若干步，每一步都取当前最优解，即局部最优解。\n* 分治法：求解问题唯一解，将问题分解为小规模的子问题，子问题之间相互独立。\n* 回溯法：求解问题最优解或唯一解，就是深度优先搜索，常用递归实现。\n* 分支限界法：求解问题最优解或唯一解，活结点。\n* 动态规划：求解最优解。同分治法类似，只是动态规划保存了之前求得的所有子问题的解，以避免重复的计算。\n* 随机化算法：分类有\n* ①数值随机算法：用于数值问题的求解，得到近似解。\n* ②蒙特卡洛算法：计算数学中的一种计算方法，用于求问题的准确解，得到正确的概率以来与时间。\n* ③拉斯维加斯算法：与蒙特卡洛算法相似，但是绝不返回错误的解。\n* ④舍伍德算法：在确定性算法中加入随机性来降低最坏情况出现的概率。\n\n### 13、域名查询记录\n* 域名查询记录先本地DNS缓存，再HOSTS表，然后再查找本地DNS服务器，顶级域名服务器、权限域名服务器。\n\n### 14、TCP/IP协议栈中协议和层次对应的关系\n![tcp.png](http://upload-images.jianshu.io/upload_images/4970496-279f07818917a8b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 15、小根堆和大根堆\n* 小根堆满足关系：k<sub>i</sub> ≤ k<sub>2i</sub> 且 k<sub>i</sub> ≤ k<sub>2i+1</sub>（I=1,2,....,n/2）\n* 大根堆满足关系：k<sub>i</sub> ≥ k<sub>2i</sub> 且 k<sub>i</sub> ≥ k<sub>2i+1</sub>（I=1,2,....,n/2）\n\n","slug":"软件设计师考点内容-一","published":1,"updated":"2018-03-09T08:46:00.966Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjejq13bx0005okfy8vojsndu","content":"<h1 id=\"软件设计师考点内容分析\"><a href=\"#软件设计师考点内容分析\" class=\"headerlink\" title=\"软件设计师考点内容分析\"></a>软件设计师考点内容分析</h1><h3 id=\"1、CPU构成\"><a href=\"#1、CPU构成\" class=\"headerlink\" title=\"1、CPU构成\"></a>1、CPU构成</h3><ul>\n<li>程序计数器(PC)：存放执行指令的地方，计算之前要用到</li>\n<li>累加器(AC)：暂时存放算数逻辑运算部件ALU运算的结果信息</li>\n<li>指令寄存器(IR)：保存当前正在执行的一条指令</li>\n<li>地址寄存器(AR)：保存当前CPU所要访问的内存单元的地址</li>\n</ul>\n<h3 id=\"2、DMA-Direct-Memory-Access，直接内存存取\"><a href=\"#2、DMA-Direct-Memory-Access，直接内存存取\" class=\"headerlink\" title=\"2、DMA(Direct Memory Access，直接内存存取)\"></a>2、DMA(Direct Memory Access，直接内存存取)</h3><ul>\n<li>DMA工作方式，是在DMA控制硬件的控制下，实现内存与外设间数据的直接传送，并不需要CPU参与工作，由于DMA方式是在DMA控制硬件的控制下实现数据的传送，不需要CPU执行程序，故这种方式传送的速度最快。</li>\n</ul>\n<h3 id=\"3、系统可靠度\"><a href=\"#3、系统可靠度\" class=\"headerlink\" title=\"3、系统可靠度\"></a>3、系统可靠度</h3><ul>\n<li>并联部件的可靠度=1-部件失效率的乘积</li>\n</ul>\n<h3 id=\"4、海明码\"><a href=\"#4、海明码\" class=\"headerlink\" title=\"4、海明码\"></a>4、海明码</h3><ul>\n<li>海明码是一种可以纠正一位差错的编码</li>\n<li>公式：2<sup>r</sup>&gt;=k+r+1 (r增加的冗余位，k有效的信息位)</li>\n</ul>\n<h3 id=\"5、高速缓存Cache\"><a href=\"#5、高速缓存Cache\" class=\"headerlink\" title=\"5、高速缓存Cache\"></a>5、高速缓存Cache</h3><ul>\n<li>Cache位于CPU和主存之间，由硬件实现，容量小，一般在几KB到几MB之间，速度一般比主存快5到10倍，由快速半导体存储器制成，其内容是主存内容的副本(Cache无法扩大主存的容量)，Cache既可存放程序又可存放数据。</li>\n</ul>\n<h3 id=\"6、软件分析到设计的过程\"><a href=\"#6、软件分析到设计的过程\" class=\"headerlink\" title=\"6、软件分析到设计的过程\"></a>6、软件分析到设计的过程</h3><ul>\n<li>研究、分析和审查数据流图。根据穿越系统边界的信息流初步确定系统与外部接口</li>\n<li>根据数据流图决定问题的类型。数据处理问题通常有两种类型：变换型和事务型</li>\n<li>由数据流图推导出系统的初始结构图</li>\n<li>利用一些启发式原则来改进系统的初始结构图，直到得到符合要求的结构图为止</li>\n<li>根据分析模型中的实体关系图和数据字典进行数据设计，包括数据库设计和数据文件的设计</li>\n<li>在设计的基础上，依旧分析模型中的加工规格说明、状态转换图进行过程设计。</li>\n</ul>\n<h3 id=\"7、螺旋模型\"><a href=\"#7、螺旋模型\" class=\"headerlink\" title=\"7、螺旋模型\"></a>7、螺旋模型</h3><ul>\n<li>螺旋模型是一种演化软件开发过程模型，它兼顾了快速原型的迭代的特征以及瀑布模型的系统化与严格监控。螺旋模型最大的特点在于引入了其他模型不具备的风险分析，使软件在无法排除重大风险时有机会停止，以减小损失。同时，在每个迭代阶段构建原型是螺旋模型用以减小风险的途径。螺旋模型更适合大型的昂贵的系统级软件应用。</li>\n</ul>\n<h3 id=\"8、多态\"><a href=\"#8、多态\" class=\"headerlink\" title=\"8、多态\"></a>8、多态</h3><ul>\n<li>多态是同一操作用于不同对象，可以有不同的解释，产生不同的执行结果。在运行时，可以通过指向基类的指针，来调用实现派生类中的方法。也就是说客户类其实在调用方法时，并不需要知道特定子类的实现，都会用统一的方式来调用。</li>\n</ul>\n<h3 id=\"9、装饰模式、外观模式\"><a href=\"#9、装饰模式、外观模式\" class=\"headerlink\" title=\"9、装饰模式、外观模式\"></a>9、装饰模式、外观模式</h3><ul>\n<li>装饰模式是一种对象结构型模式，可动态的给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。通过装饰模式，可以在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责；当需要动态的给一个对象增加功能，这些功能可以再动态的被撤销时可使用装饰模式；当不能采用生成子类的方法进行扩充时也可使用装饰模式。</li>\n<li>外观模式是对象的结构模式，要求外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</li>\n</ul>\n<h3 id=\"10、共享锁和排它锁\"><a href=\"#10、共享锁和排它锁\" class=\"headerlink\" title=\"10、共享锁和排它锁\"></a>10、共享锁和排它锁</h3><ul>\n<li>共享锁(S锁)，又称为读锁，若事务T对数据对象A加上S锁，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上面的S锁。</li>\n<li>排它锁(X锁)，又称为写锁，若事务T对数据对象A加上X锁，其他事务不能再对A加任何锁，直到T释放A上的锁。</li>\n</ul>\n<h3 id=\"11、二叉树遍历\"><a href=\"#11、二叉树遍历\" class=\"headerlink\" title=\"11、二叉树遍历\"></a>11、二叉树遍历</h3><ul>\n<li>先序遍历：先根后左子树再右子树</li>\n<li>中序遍历：先左子树后根再右子树</li>\n<li>后序遍历：先左子树后右子树再根</li>\n</ul>\n<h3 id=\"12、算法设计策略\"><a href=\"#12、算法设计策略\" class=\"headerlink\" title=\"12、算法设计策略\"></a>12、算法设计策略</h3><ul>\n<li>贪心法：求解问题最优解，将问题分解为若干步，每一步都取当前最优解，即局部最优解。</li>\n<li>分治法：求解问题唯一解，将问题分解为小规模的子问题，子问题之间相互独立。</li>\n<li>回溯法：求解问题最优解或唯一解，就是深度优先搜索，常用递归实现。</li>\n<li>分支限界法：求解问题最优解或唯一解，活结点。</li>\n<li>动态规划：求解最优解。同分治法类似，只是动态规划保存了之前求得的所有子问题的解，以避免重复的计算。</li>\n<li>随机化算法：分类有</li>\n<li>①数值随机算法：用于数值问题的求解，得到近似解。</li>\n<li>②蒙特卡洛算法：计算数学中的一种计算方法，用于求问题的准确解，得到正确的概率以来与时间。</li>\n<li>③拉斯维加斯算法：与蒙特卡洛算法相似，但是绝不返回错误的解。</li>\n<li>④舍伍德算法：在确定性算法中加入随机性来降低最坏情况出现的概率。</li>\n</ul>\n<h3 id=\"13、域名查询记录\"><a href=\"#13、域名查询记录\" class=\"headerlink\" title=\"13、域名查询记录\"></a>13、域名查询记录</h3><ul>\n<li>域名查询记录先本地DNS缓存，再HOSTS表，然后再查找本地DNS服务器，顶级域名服务器、权限域名服务器。</li>\n</ul>\n<h3 id=\"14、TCP-IP协议栈中协议和层次对应的关系\"><a href=\"#14、TCP-IP协议栈中协议和层次对应的关系\" class=\"headerlink\" title=\"14、TCP/IP协议栈中协议和层次对应的关系\"></a>14、TCP/IP协议栈中协议和层次对应的关系</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/4970496-279f07818917a8b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"tcp.png\"></p>\n<h3 id=\"15、小根堆和大根堆\"><a href=\"#15、小根堆和大根堆\" class=\"headerlink\" title=\"15、小根堆和大根堆\"></a>15、小根堆和大根堆</h3><ul>\n<li>小根堆满足关系：k<sub>i</sub> ≤ k<sub>2i</sub> 且 k<sub>i</sub> ≤ k<sub>2i+1</sub>（I=1,2,….,n/2）</li>\n<li>大根堆满足关系：k<sub>i</sub> ≥ k<sub>2i</sub> 且 k<sub>i</sub> ≥ k<sub>2i+1</sub>（I=1,2,….,n/2）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"软件设计师考点内容分析\"><a href=\"#软件设计师考点内容分析\" class=\"headerlink\" title=\"软件设计师考点内容分析\"></a>软件设计师考点内容分析</h1><h3 id=\"1、CPU构成\"><a href=\"#1、CPU构成\" class=\"headerlink\" title=\"1、CPU构成\"></a>1、CPU构成</h3><ul>\n<li>程序计数器(PC)：存放执行指令的地方，计算之前要用到</li>\n<li>累加器(AC)：暂时存放算数逻辑运算部件ALU运算的结果信息</li>\n<li>指令寄存器(IR)：保存当前正在执行的一条指令</li>\n<li>地址寄存器(AR)：保存当前CPU所要访问的内存单元的地址</li>\n</ul>\n<h3 id=\"2、DMA-Direct-Memory-Access，直接内存存取\"><a href=\"#2、DMA-Direct-Memory-Access，直接内存存取\" class=\"headerlink\" title=\"2、DMA(Direct Memory Access，直接内存存取)\"></a>2、DMA(Direct Memory Access，直接内存存取)</h3><ul>\n<li>DMA工作方式，是在DMA控制硬件的控制下，实现内存与外设间数据的直接传送，并不需要CPU参与工作，由于DMA方式是在DMA控制硬件的控制下实现数据的传送，不需要CPU执行程序，故这种方式传送的速度最快。</li>\n</ul>\n<h3 id=\"3、系统可靠度\"><a href=\"#3、系统可靠度\" class=\"headerlink\" title=\"3、系统可靠度\"></a>3、系统可靠度</h3><ul>\n<li>并联部件的可靠度=1-部件失效率的乘积</li>\n</ul>\n<h3 id=\"4、海明码\"><a href=\"#4、海明码\" class=\"headerlink\" title=\"4、海明码\"></a>4、海明码</h3><ul>\n<li>海明码是一种可以纠正一位差错的编码</li>\n<li>公式：2<sup>r</sup>&gt;=k+r+1 (r增加的冗余位，k有效的信息位)</li>\n</ul>\n<h3 id=\"5、高速缓存Cache\"><a href=\"#5、高速缓存Cache\" class=\"headerlink\" title=\"5、高速缓存Cache\"></a>5、高速缓存Cache</h3><ul>\n<li>Cache位于CPU和主存之间，由硬件实现，容量小，一般在几KB到几MB之间，速度一般比主存快5到10倍，由快速半导体存储器制成，其内容是主存内容的副本(Cache无法扩大主存的容量)，Cache既可存放程序又可存放数据。</li>\n</ul>\n<h3 id=\"6、软件分析到设计的过程\"><a href=\"#6、软件分析到设计的过程\" class=\"headerlink\" title=\"6、软件分析到设计的过程\"></a>6、软件分析到设计的过程</h3><ul>\n<li>研究、分析和审查数据流图。根据穿越系统边界的信息流初步确定系统与外部接口</li>\n<li>根据数据流图决定问题的类型。数据处理问题通常有两种类型：变换型和事务型</li>\n<li>由数据流图推导出系统的初始结构图</li>\n<li>利用一些启发式原则来改进系统的初始结构图，直到得到符合要求的结构图为止</li>\n<li>根据分析模型中的实体关系图和数据字典进行数据设计，包括数据库设计和数据文件的设计</li>\n<li>在设计的基础上，依旧分析模型中的加工规格说明、状态转换图进行过程设计。</li>\n</ul>\n<h3 id=\"7、螺旋模型\"><a href=\"#7、螺旋模型\" class=\"headerlink\" title=\"7、螺旋模型\"></a>7、螺旋模型</h3><ul>\n<li>螺旋模型是一种演化软件开发过程模型，它兼顾了快速原型的迭代的特征以及瀑布模型的系统化与严格监控。螺旋模型最大的特点在于引入了其他模型不具备的风险分析，使软件在无法排除重大风险时有机会停止，以减小损失。同时，在每个迭代阶段构建原型是螺旋模型用以减小风险的途径。螺旋模型更适合大型的昂贵的系统级软件应用。</li>\n</ul>\n<h3 id=\"8、多态\"><a href=\"#8、多态\" class=\"headerlink\" title=\"8、多态\"></a>8、多态</h3><ul>\n<li>多态是同一操作用于不同对象，可以有不同的解释，产生不同的执行结果。在运行时，可以通过指向基类的指针，来调用实现派生类中的方法。也就是说客户类其实在调用方法时，并不需要知道特定子类的实现，都会用统一的方式来调用。</li>\n</ul>\n<h3 id=\"9、装饰模式、外观模式\"><a href=\"#9、装饰模式、外观模式\" class=\"headerlink\" title=\"9、装饰模式、外观模式\"></a>9、装饰模式、外观模式</h3><ul>\n<li>装饰模式是一种对象结构型模式，可动态的给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。通过装饰模式，可以在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责；当需要动态的给一个对象增加功能，这些功能可以再动态的被撤销时可使用装饰模式；当不能采用生成子类的方法进行扩充时也可使用装饰模式。</li>\n<li>外观模式是对象的结构模式，要求外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</li>\n</ul>\n<h3 id=\"10、共享锁和排它锁\"><a href=\"#10、共享锁和排它锁\" class=\"headerlink\" title=\"10、共享锁和排它锁\"></a>10、共享锁和排它锁</h3><ul>\n<li>共享锁(S锁)，又称为读锁，若事务T对数据对象A加上S锁，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上面的S锁。</li>\n<li>排它锁(X锁)，又称为写锁，若事务T对数据对象A加上X锁，其他事务不能再对A加任何锁，直到T释放A上的锁。</li>\n</ul>\n<h3 id=\"11、二叉树遍历\"><a href=\"#11、二叉树遍历\" class=\"headerlink\" title=\"11、二叉树遍历\"></a>11、二叉树遍历</h3><ul>\n<li>先序遍历：先根后左子树再右子树</li>\n<li>中序遍历：先左子树后根再右子树</li>\n<li>后序遍历：先左子树后右子树再根</li>\n</ul>\n<h3 id=\"12、算法设计策略\"><a href=\"#12、算法设计策略\" class=\"headerlink\" title=\"12、算法设计策略\"></a>12、算法设计策略</h3><ul>\n<li>贪心法：求解问题最优解，将问题分解为若干步，每一步都取当前最优解，即局部最优解。</li>\n<li>分治法：求解问题唯一解，将问题分解为小规模的子问题，子问题之间相互独立。</li>\n<li>回溯法：求解问题最优解或唯一解，就是深度优先搜索，常用递归实现。</li>\n<li>分支限界法：求解问题最优解或唯一解，活结点。</li>\n<li>动态规划：求解最优解。同分治法类似，只是动态规划保存了之前求得的所有子问题的解，以避免重复的计算。</li>\n<li>随机化算法：分类有</li>\n<li>①数值随机算法：用于数值问题的求解，得到近似解。</li>\n<li>②蒙特卡洛算法：计算数学中的一种计算方法，用于求问题的准确解，得到正确的概率以来与时间。</li>\n<li>③拉斯维加斯算法：与蒙特卡洛算法相似，但是绝不返回错误的解。</li>\n<li>④舍伍德算法：在确定性算法中加入随机性来降低最坏情况出现的概率。</li>\n</ul>\n<h3 id=\"13、域名查询记录\"><a href=\"#13、域名查询记录\" class=\"headerlink\" title=\"13、域名查询记录\"></a>13、域名查询记录</h3><ul>\n<li>域名查询记录先本地DNS缓存，再HOSTS表，然后再查找本地DNS服务器，顶级域名服务器、权限域名服务器。</li>\n</ul>\n<h3 id=\"14、TCP-IP协议栈中协议和层次对应的关系\"><a href=\"#14、TCP-IP协议栈中协议和层次对应的关系\" class=\"headerlink\" title=\"14、TCP/IP协议栈中协议和层次对应的关系\"></a>14、TCP/IP协议栈中协议和层次对应的关系</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/4970496-279f07818917a8b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"tcp.png\"></p>\n<h3 id=\"15、小根堆和大根堆\"><a href=\"#15、小根堆和大根堆\" class=\"headerlink\" title=\"15、小根堆和大根堆\"></a>15、小根堆和大根堆</h3><ul>\n<li>小根堆满足关系：k<sub>i</sub> ≤ k<sub>2i</sub> 且 k<sub>i</sub> ≤ k<sub>2i+1</sub>（I=1,2,….,n/2）</li>\n<li>大根堆满足关系：k<sub>i</sub> ≥ k<sub>2i</sub> 且 k<sub>i</sub> ≥ k<sub>2i+1</sub>（I=1,2,….,n/2）</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjejq13bj0000okfyfkrulhaj","tag_id":"cjejq13bv0004okfyhk1ot6vp","_id":"cjejq13c00007okfy1q4gad0s"},{"post_id":"cjejq13bq0002okfynbwsvojy","tag_id":"cjejq13bz0006okfydnwmk9oo","_id":"cjejq13c10009okfy2c5ru6g5"},{"post_id":"cjejq13bx0005okfy8vojsndu","tag_id":"cjejq13c10008okfy16rn06dk","_id":"cjejq13c1000aokfy2c2mpl98"}],"Tag":[{"name":"Python","_id":"cjejq13bv0004okfyhk1ot6vp"},{"name":"git","_id":"cjejq13bz0006okfydnwmk9oo"},{"name":"软件设计师","_id":"cjejq13c10008okfy16rn06dk"}]}}