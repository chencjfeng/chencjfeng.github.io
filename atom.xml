<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chenJF</title>
  <icon>https://www.gravatar.com/avatar/a13051f46ba4243764ed2b02a83f6783</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenJF.github.io/"/>
  <updated>2017-11-04T07:09:18.000Z</updated>
  <id>http://chenJF.github.io/</id>
  
  <author>
    <name>chen_JF</name>
    <email>chencjfeng@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git pull冲突解决</title>
    <link href="http://chenJF.github.io/2017/11/04/git-pull%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/"/>
    <id>http://chenJF.github.io/2017/11/04/git-pull冲突解决/</id>
    <published>2017-11-04T07:04:14.000Z</published>
    <updated>2017-11-04T07:09:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="导语："><a href="#导语：" class="headerlink" title="导语："></a>导语：</h3><blockquote><p>在公司团队中写完代码就要提交到git上面，因为多人合作，先要将远端的代码pull更新到本地。往往这时候因为大家对同一个文件同一个地方做了操作，导致pull代码冲突发生，工程崩溃。提示错误信息如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">error: Your local changes to &apos;c/environ.c&apos; would be overwritten by merge.  Aborting.</div><div class="line">Please, commit your changes or stash them before you can merge.</div></pre></td></tr></table></figure></p><p>这个提示意思就是说更新下来的内容和本地修改的内容有冲突，先提交你改变的内容或者先将你本地修改的内容暂时存起来。<br>下面我们就分几步解决处理这个pull冲突问题.<br><br></p><h3 id="1-存储本地修改的内容"><a href="#1-存储本地修改的内容" class="headerlink" title="1.存储本地修改的内容"></a>1.存储本地修改的内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git stash</div></pre></td></tr></table></figure></blockquote><p>这句命令就是将本地修改的代码做一份备份存储起来，可以用git stash list 查看刚刚备份保存的内容：<br><img src="http://upload-images.jianshu.io/upload_images/4970496-84f5c1a7a77608c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="git stash list.png"><br>其中stash@{0}就是刚刚备份存储的标记<br><br></p><h3 id="2-pull内容"><a href="#2-pull内容" class="headerlink" title="2.pull内容"></a>2.pull内容</h3><p>将本地代码做了备份保存后，就可以pull远端代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git pull</div></pre></td></tr></table></figure></p><p><br></p><h3 id="3-还原备份暂存的代码"><a href="#3-还原备份暂存的代码" class="headerlink" title="3.还原备份暂存的代码"></a>3.还原备份暂存的代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git stash pop stash@&#123;0&#125;</div></pre></td></tr></table></figure><p>stash@{0}是你刚刚备份存储的标记<br>这时候系统会提示类似以下的信息：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Auto-merging c/environ.c</div><div class="line">CONFLICT (content): Merge conflict in c/environ.c</div></pre></td></tr></table></figure></p><p>这个提示内容意思就是系统自动合并修改的内容，但是当中会有冲突，需要解决其中的冲突。<br><br></p><h3 id="4-解决文件中的冲突内容"><a href="#4-解决文件中的冲突内容" class="headerlink" title="4.解决文件中的冲突内容"></a>4.解决文件中的冲突内容</h3><p>打开上面提示的冲突文件，会看到类似的内容：</p><p><img src="http://upload-images.jianshu.io/upload_images/4970496-92f347853efe0765.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="冲突提示.png"><br>其中Updated upstream和=======之间的内容是从远端pull下来的代码，=======和Stashed changes之间的内容则是你本地修改的内容。这时候，需要你修改决定留下哪些需要的内容。</p><p>最后，解决完冲突，就可以正常git提交了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;导语：&quot;&gt;&lt;a href=&quot;#导语：&quot; class=&quot;headerlink&quot; title=&quot;导语：&quot;&gt;&lt;/a&gt;导语：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在公司团队中写完代码就要提交到git上面，因为多人合作，先要将远端的代码pull更新到本地。往往这时候因为
      
    
    </summary>
    
      <category term="工具" scheme="http://chenJF.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://chenJF.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python批量生成二维码</title>
    <link href="http://chenJF.github.io/2017/11/04/Python%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <id>http://chenJF.github.io/2017/11/04/Python批量生成二维码/</id>
    <published>2017-11-04T06:54:31.000Z</published>
    <updated>2017-11-04T07:02:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python2-7-批量生成二维"><a href="#Python2-7-批量生成二维" class="headerlink" title="Python2.7 批量生成二维"></a>Python2.7 批量生成二维</h1><h2 id="导语："><a href="#导语：" class="headerlink" title="导语："></a>导语：</h2><blockquote><p>本文针对mac电脑利用Python2.7脚本批量生成二维码，由于Python生成二维码利用了qrcode和image库，需要先用pip安装这两个库。这里顺便说了下pip的安装。</p></blockquote><h3 id="1-pip的安装"><a href="#1-pip的安装" class="headerlink" title="1.pip的安装"></a>1.pip的安装</h3><ul><li><p>用命令行安装pip</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo easy_install pip</div></pre></td></tr></table></figure></li><li><p>检查是否安装成功，只要不是not found pip，则安装成功</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pip help</div></pre></td></tr></table></figure></li></ul><p><br></p><h3 id="2-安装qrcode和image库"><a href="#2-安装qrcode和image库" class="headerlink" title="2.安装qrcode和image库"></a>2.安装qrcode和image库</h3><ul><li><p>安装命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#安装失败可以加sudo安装</div><div class="line">pip install qrcode</div><div class="line">pip install image</div></pre></td></tr></table></figure></li><li><p>检查是否安装成功,安装成功会有相应的版本信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pip show qrcode</div><div class="line">pip show image</div></pre></td></tr></table></figure></li><li><p>安装成功显示界面信息</p></li><li><p><img src="http://upload-images.jianshu.io/upload_images/4970496-ce568913bd5e15a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="python-qrcode.png"><br><br></p><h3 id="3-示例代码"><a href="#3-示例代码" class="headerlink" title="3.示例代码"></a>3.示例代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 导入qrcode库</div><div class="line">import qrcode</div><div class="line"></div><div class="line">#生成一张二维码图片，url二维码的内容，name保存二维码图片的名字</div><div class="line">def createOneQR(url,name):</div><div class="line">qr=qrcode.QRCode(version = 2,</div><div class="line">error_correction = qrcode.constants.ERROR_CORRECT_L, #容错样式</div><div class="line">box_size=10,   #每个格子的像素</div><div class="line">border=1)      #边框宽度</div><div class="line">qr.add_data(url)</div><div class="line">qr.make(fit=True)</div><div class="line">img = qr.make_image()</div><div class="line">img.resize((140, 140)).save(name)   #保存为140*140的图片</div><div class="line"></div><div class="line"></div><div class="line">#根据文档批量生成二维码</div><div class="line">def getQR():</div><div class="line">num = 0</div><div class="line">#遍历文档每行内容生成二维码</div><div class="line">for line in open(&quot;license-for-card.txt&quot;):</div><div class="line">imageName = &quot;license&quot;+str(num)+&quot;.png&quot;</div><div class="line">createOneQR(line,imageName)</div><div class="line">num += 1</div><div class="line"></div><div class="line">getQR()</div></pre></td></tr></table></figure></li><li><p>参数 version 表示生成二维码的尺寸大小，取值范围是 1 至 40，最小尺寸 1 会生成 21 <em> 21 的二维码，version 每增加 1，生成的二维码就会添加 4 尺寸，例如 version 是 2，则生成 25 </em> 25 的二维码。</p></li><li><p>参数 error_correction 指定二维码的容错系数，分别有以下4个系数：</p></li><li>ERROR_CORRECT_L: 7%的字码可被容错</li><li>ERROR_CORRECT_M: 15%的字码可被容错</li><li>ERROR_CORRECT_Q: 25%的字码可被容错</li><li>ERROR_CORRECT_H: 30%的字码可被容错</li><li>参数 box_size 表示二维码里每个格子的像素大小。</li><li>参数 border 表示边框的格子厚度是多少（默认是4）。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python2-7-批量生成二维&quot;&gt;&lt;a href=&quot;#Python2-7-批量生成二维&quot; class=&quot;headerlink&quot; title=&quot;Python2.7 批量生成二维&quot;&gt;&lt;/a&gt;Python2.7 批量生成二维&lt;/h1&gt;&lt;h2 id=&quot;导语：&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Python" scheme="http://chenJF.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://chenJF.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师考点内容(一)</title>
    <link href="http://chenJF.github.io/2017/11/04/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E8%80%83%E7%82%B9%E5%86%85%E5%AE%B9-%E4%B8%80/"/>
    <id>http://chenJF.github.io/2017/11/04/软件设计师考点内容-一/</id>
    <published>2017-11-04T06:54:31.000Z</published>
    <updated>2017-11-04T07:06:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件设计师考点内容分析"><a href="#软件设计师考点内容分析" class="headerlink" title="软件设计师考点内容分析"></a>软件设计师考点内容分析</h1><h3 id="1、CPU构成"><a href="#1、CPU构成" class="headerlink" title="1、CPU构成"></a>1、CPU构成</h3><ul><li>程序计数器(PC)：存放执行指令的地方，计算之前要用到</li><li>累加器(AC)：暂时存放算数逻辑运算部件ALU运算的结果信息</li><li>指令寄存器(IR)：保存当前正在执行的一条指令</li><li>地址寄存器(AR)：保存当前CPU所要访问的内存单元的地址</li></ul><h3 id="2、DMA-Direct-Memory-Access，直接内存存取"><a href="#2、DMA-Direct-Memory-Access，直接内存存取" class="headerlink" title="2、DMA(Direct Memory Access，直接内存存取)"></a>2、DMA(Direct Memory Access，直接内存存取)</h3><ul><li>DMA工作方式，是在DMA控制硬件的控制下，实现内存与外设间数据的直接传送，并不需要CPU参与工作，由于DMA方式是在DMA控制硬件的控制下实现数据的传送，不需要CPU执行程序，故这种方式传送的速度最快。</li></ul><h3 id="3、系统可靠度"><a href="#3、系统可靠度" class="headerlink" title="3、系统可靠度"></a>3、系统可靠度</h3><ul><li>并联部件的可靠度=1-部件失效率的乘积</li></ul><h3 id="4、海明码"><a href="#4、海明码" class="headerlink" title="4、海明码"></a>4、海明码</h3><ul><li>海明码是一种可以纠正一位差错的编码</li><li>公式：2<sup>r</sup>&gt;=k+r+1 (r增加的冗余位，k有效的信息位)</li></ul><h3 id="5、高速缓存Cache"><a href="#5、高速缓存Cache" class="headerlink" title="5、高速缓存Cache"></a>5、高速缓存Cache</h3><ul><li>Cache位于CPU和主存之间，由硬件实现，容量小，一般在几KB到几MB之间，速度一般比主存快5到10倍，由快速半导体存储器制成，其内容是主存内容的副本(Cache无法扩大主存的容量)，Cache既可存放程序又可存放数据。</li></ul><h3 id="6、软件分析到设计的过程"><a href="#6、软件分析到设计的过程" class="headerlink" title="6、软件分析到设计的过程"></a>6、软件分析到设计的过程</h3><ul><li>研究、分析和审查数据流图。根据穿越系统边界的信息流初步确定系统与外部接口</li><li>根据数据流图决定问题的类型。数据处理问题通常有两种类型：变换型和事务型</li><li>由数据流图推导出系统的初始结构图</li><li>利用一些启发式原则来改进系统的初始结构图，直到得到符合要求的结构图为止</li><li>根据分析模型中的实体关系图和数据字典进行数据设计，包括数据库设计和数据文件的设计</li><li>在设计的基础上，依旧分析模型中的加工规格说明、状态转换图进行过程设计。</li></ul><h3 id="7、螺旋模型"><a href="#7、螺旋模型" class="headerlink" title="7、螺旋模型"></a>7、螺旋模型</h3><ul><li>螺旋模型是一种演化软件开发过程模型，它兼顾了快速原型的迭代的特征以及瀑布模型的系统化与严格监控。螺旋模型最大的特点在于引入了其他模型不具备的风险分析，使软件在无法排除重大风险时有机会停止，以减小损失。同时，在每个迭代阶段构建原型是螺旋模型用以减小风险的途径。螺旋模型更适合大型的昂贵的系统级软件应用。</li></ul><h3 id="8、多态"><a href="#8、多态" class="headerlink" title="8、多态"></a>8、多态</h3><ul><li>多态是同一操作用于不同对象，可以有不同的解释，产生不同的执行结果。在运行时，可以通过指向基类的指针，来调用实现派生类中的方法。也就是说客户类其实在调用方法时，并不需要知道特定子类的实现，都会用统一的方式来调用。</li></ul><h3 id="9、装饰模式、外观模式"><a href="#9、装饰模式、外观模式" class="headerlink" title="9、装饰模式、外观模式"></a>9、装饰模式、外观模式</h3><ul><li>装饰模式是一种对象结构型模式，可动态的给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。通过装饰模式，可以在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责；当需要动态的给一个对象增加功能，这些功能可以再动态的被撤销时可使用装饰模式；当不能采用生成子类的方法进行扩充时也可使用装饰模式。</li><li>外观模式是对象的结构模式，要求外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</li></ul><h3 id="10、共享锁和排它锁"><a href="#10、共享锁和排它锁" class="headerlink" title="10、共享锁和排它锁"></a>10、共享锁和排它锁</h3><ul><li>共享锁(S锁)，又称为读锁，若事务T对数据对象A加上S锁，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上面的S锁。</li><li>排它锁(X锁)，又称为写锁，若事务T对数据对象A加上X锁，其他事务不能再对A加任何锁，直到T释放A上的锁。</li></ul><h3 id="11、二叉树遍历"><a href="#11、二叉树遍历" class="headerlink" title="11、二叉树遍历"></a>11、二叉树遍历</h3><ul><li>先序遍历：先根后左子树再右子树</li><li>中序遍历：先左子树后根再右子树</li><li>后序遍历：先左子树后右子树再根</li></ul><h3 id="12、算法设计策略"><a href="#12、算法设计策略" class="headerlink" title="12、算法设计策略"></a>12、算法设计策略</h3><ul><li>贪心法：求解问题最优解，将问题分解为若干步，每一步都取当前最优解，即局部最优解。</li><li>分治法：求解问题唯一解，将问题分解为小规模的子问题，子问题之间相互独立。</li><li>回溯法：求解问题最优解或唯一解，就是深度优先搜索，常用递归实现。</li><li>分支限界法：求解问题最优解或唯一解，活结点。</li><li>动态规划：求解最优解。同分治法类似，只是动态规划保存了之前求得的所有子问题的解，以避免重复的计算。</li><li>随机化算法：分类有</li><li>①数值随机算法：用于数值问题的求解，得到近似解。</li><li>②蒙特卡洛算法：计算数学中的一种计算方法，用于求问题的准确解，得到正确的概率以来与时间。</li><li>③拉斯维加斯算法：与蒙特卡洛算法相似，但是绝不返回错误的解。</li><li>④舍伍德算法：在确定性算法中加入随机性来降低最坏情况出现的概率。</li></ul><h3 id="13、域名查询记录"><a href="#13、域名查询记录" class="headerlink" title="13、域名查询记录"></a>13、域名查询记录</h3><ul><li>域名查询记录先本地DNS缓存，再HOSTS表，然后再查找本地DNS服务器，顶级域名服务器、权限域名服务器。</li></ul><h3 id="14、TCP-IP协议栈中协议和层次对应的关系"><a href="#14、TCP-IP协议栈中协议和层次对应的关系" class="headerlink" title="14、TCP/IP协议栈中协议和层次对应的关系"></a>14、TCP/IP协议栈中协议和层次对应的关系</h3><p><img src="/Users/chencjfeng/Desktop/简书笔记/tcp.png" alt=""></p><h3 id="15、小根堆和大根堆"><a href="#15、小根堆和大根堆" class="headerlink" title="15、小根堆和大根堆"></a>15、小根堆和大根堆</h3><ul><li>小根堆满足关系：k<sub>i</sub> ≤ k<sub>2i</sub> 且 k<sub>i</sub> ≤ k<sub>2i+1</sub>（I=1,2,….,n/2）</li><li>大根堆满足关系：k<sub>i</sub> ≥ k<sub>2i</sub> 且 k<sub>i</sub> ≥ k<sub>2i+1</sub>（I=1,2,….,n/2）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;软件设计师考点内容分析&quot;&gt;&lt;a href=&quot;#软件设计师考点内容分析&quot; class=&quot;headerlink&quot; title=&quot;软件设计师考点内容分析&quot;&gt;&lt;/a&gt;软件设计师考点内容分析&lt;/h1&gt;&lt;h3 id=&quot;1、CPU构成&quot;&gt;&lt;a href=&quot;#1、CPU构成&quot; c
      
    
    </summary>
    
      <category term="软考" scheme="http://chenJF.github.io/categories/%E8%BD%AF%E8%80%83/"/>
    
    
      <category term="软件设计师" scheme="http://chenJF.github.io/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
  </entry>
  
</feed>
